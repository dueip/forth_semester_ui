# БПМ-22-4:
# Макуров Михаил
# Воеводин Егор
# Нейман Алексей

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import *
from PyQt6.QtGui import QKeySequence, QKeyEvent, QShortcut
from enum import *



# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.





class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(434, 719)
        MainWindow.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.whole_calculator = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.whole_calculator.setGeometry(QtCore.QRect(0, 0, 441, 701))
        self.whole_calculator.setStyleSheet("QPushButton{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: darkGray;\n"
"     font: bold 36px;\n"
"}\n"
"QPushButton:pressed{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: lightGray;\n"
"     font: bold 36px;\n"
"}\n"
"QPushButton:!enabled{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: gray;\n"
"     font: bold 36px;\n"
"}\n"
"QGroupBox{\n"
"     border-style: outset;\n"
"     border-width: 0px;\n"
"     background-color: darkGray;\n"
"}\n"
"QSlider{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: darkGray;\n"
"     font: bold 36px;\n"
"}\n"
"QLabel{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: darkGray;\n"
"     font: bold 36px;\n"
"}\n"
"\n"
"QSlider:!enabled{\n"
"     border-style: outset;\n"
"     border-width: 3px;\n"
"     border-radius: 10px;\n"
"     border-color: black;\n"
"     background-color: gray;\n"
"     font: bold 36px;\n"
"}\n"
"\n"
"")
        self.whole_calculator.setObjectName("whole_calculator")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.whole_calculator)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.previous_input = QtWidgets.QLabel(parent=self.whole_calculator)
        self.previous_input.setMaximumSize(QtCore.QSize(16777215, 50))
        self.previous_input.setObjectName("previous_input")
        self.verticalLayout_2.addWidget(self.previous_input)
        self.result = QtWidgets.QLabel(parent=self.whole_calculator)
        self.result.setMaximumSize(QtCore.QSize(16777215, 75))
        self.result.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.result.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.result.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.result.setObjectName("result")
        self.verticalLayout_2.addWidget(self.result)
        self.number_system = QtWidgets.QLabel(parent=self.whole_calculator)
        self.number_system.setObjectName("number_system")
        self.verticalLayout_2.addWidget(self.number_system)
        self.horizontalSlider = QtWidgets.QSlider(parent=self.whole_calculator)
        self.horizontalSlider.setEnabled(True)
        self.horizontalSlider.setMinimum(2)
        self.horizontalSlider.setMaximum(16)
        self.horizontalSlider.setPageStep(1)
        self.horizontalSlider.setProperty("value", 10)
        self.horizontalSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider.setInvertedAppearance(True)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider)
        self.buttons = QtWidgets.QGroupBox(parent=self.whole_calculator)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttons.sizePolicy().hasHeightForWidth())
        self.buttons.setSizePolicy(sizePolicy)
        self.buttons.setStyleSheet("")
        self.buttons.setObjectName("buttons")
        self.buttonLayout = QtWidgets.QGridLayout(self.buttons)
        self.buttonLayout.setContentsMargins(-1, 0, -1, 0)
        self.buttonLayout.setObjectName("buttonLayout")
        self.number9 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number9.sizePolicy().hasHeightForWidth())
        self.number9.setSizePolicy(sizePolicy)
        self.number9.setMinimumSize(QtCore.QSize(100, 75))
        self.number9.setStyleSheet("")
        self.number9.setIconSize(QtCore.QSize(50, 30))
        self.number9.setObjectName("number9")
        self.buttonLayout.addWidget(self.number9, 2, 1, 1, 1)
        self.number4 = QtWidgets.QPushButton(parent=self.buttons)
        self.number4.setMinimumSize(QtCore.QSize(0, 75))
        self.number4.setObjectName("number4")
        self.buttonLayout.addWidget(self.number4, 3, 4, 1, 1)
        self.number8 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number8.sizePolicy().hasHeightForWidth())
        self.number8.setSizePolicy(sizePolicy)
        self.number8.setMinimumSize(QtCore.QSize(0, 75))
        self.number8.setObjectName("number8")
        self.buttonLayout.addWidget(self.number8, 2, 3, 1, 1)
        self.button_mul = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_mul.sizePolicy().hasHeightForWidth())
        self.button_mul.setSizePolicy(sizePolicy)
        self.button_mul.setMinimumSize(QtCore.QSize(0, 75))
        self.button_mul.setObjectName("button_mul")
        self.buttonLayout.addWidget(self.button_mul, 4, 0, 1, 1)
        self.number5 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number5.sizePolicy().hasHeightForWidth())
        self.number5.setSizePolicy(sizePolicy)
        self.number5.setMinimumSize(QtCore.QSize(0, 75))
        self.number5.setObjectName("number5")
        self.buttonLayout.addWidget(self.number5, 3, 3, 1, 1)
        self.number6 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number6.sizePolicy().hasHeightForWidth())
        self.number6.setSizePolicy(sizePolicy)
        self.number6.setMinimumSize(QtCore.QSize(0, 75))
        self.number6.setObjectName("number6")
        self.buttonLayout.addWidget(self.number6, 3, 1, 1, 1)
        self.number7 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number7.sizePolicy().hasHeightForWidth())
        self.number7.setSizePolicy(sizePolicy)
        self.number7.setMinimumSize(QtCore.QSize(100, 75))
        self.number7.setObjectName("number7")
        self.buttonLayout.addWidget(self.number7, 2, 4, 1, 1)
        self.button_plus = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_plus.sizePolicy().hasHeightForWidth())
        self.button_plus.setSizePolicy(sizePolicy)
        self.button_plus.setMinimumSize(QtCore.QSize(0, 75))
        self.button_plus.setObjectName("button_plus")
        self.buttonLayout.addWidget(self.button_plus, 2, 0, 1, 1)
        self.button_div = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_div.sizePolicy().hasHeightForWidth())
        self.button_div.setSizePolicy(sizePolicy)
        self.button_div.setMinimumSize(QtCore.QSize(0, 75))
        self.button_div.setObjectName("button_div")
        self.buttonLayout.addWidget(self.button_div, 5, 0, 1, 1)
        self.number3 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number3.sizePolicy().hasHeightForWidth())
        self.number3.setSizePolicy(sizePolicy)
        self.number3.setMinimumSize(QtCore.QSize(0, 75))
        self.number3.setObjectName("number3")
        self.buttonLayout.addWidget(self.number3, 4, 1, 1, 1)
        self.button_c = QtWidgets.QPushButton(parent=self.buttons)
        self.button_c.setObjectName("button_c")
        self.buttonLayout.addWidget(self.button_c, 0, 3, 1, 1)
        self.button_equal = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_equal.sizePolicy().hasHeightForWidth())
        self.button_equal.setSizePolicy(sizePolicy)
        self.button_equal.setMinimumSize(QtCore.QSize(0, 75))
        self.button_equal.setObjectName("button_equal")
        self.buttonLayout.addWidget(self.button_equal, 5, 1, 1, 1)
        self.number0 = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.number0.sizePolicy().hasHeightForWidth())
        self.number0.setSizePolicy(sizePolicy)
        self.number0.setMinimumSize(QtCore.QSize(0, 75))
        self.number0.setObjectName("number0")
        self.buttonLayout.addWidget(self.number0, 5, 4, 1, 1)
        self.number1 = QtWidgets.QPushButton(parent=self.buttons)
        self.number1.setMinimumSize(QtCore.QSize(0, 75))
        self.number1.setObjectName("number1")
        self.buttonLayout.addWidget(self.number1, 4, 4, 1, 1)
        self.number2 = QtWidgets.QPushButton(parent=self.buttons)
        self.number2.setMinimumSize(QtCore.QSize(0, 75))
        self.number2.setObjectName("number2")
        self.buttonLayout.addWidget(self.number2, 4, 3, 1, 1)
        self.button_back = QtWidgets.QPushButton(parent=self.buttons)
        self.button_back.setMaximumSize(QtCore.QSize(16777215, 49))
        self.button_back.setObjectName("button_back")
        self.buttonLayout.addWidget(self.button_back, 0, 0, 1, 1)
        self.button_sp = QtWidgets.QPushButton(parent=self.buttons)
        self.button_sp.setObjectName("button_sp")
        self.buttonLayout.addWidget(self.button_sp, 0, 1, 1, 1)
        self.button_dot = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_dot.sizePolicy().hasHeightForWidth())
        self.button_dot.setSizePolicy(sizePolicy)
        self.button_dot.setMinimumSize(QtCore.QSize(0, 75))
        self.button_dot.setObjectName("button_dot")
        self.buttonLayout.addWidget(self.button_dot, 5, 3, 1, 1)
        self.button_ce = QtWidgets.QPushButton(parent=self.buttons)
        self.button_ce.setObjectName("button_ce")
        self.buttonLayout.addWidget(self.button_ce, 0, 4, 1, 1)
        self.button_minus = QtWidgets.QPushButton(parent=self.buttons)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_minus.sizePolicy().hasHeightForWidth())
        self.button_minus.setSizePolicy(sizePolicy)
        self.button_minus.setMinimumSize(QtCore.QSize(0, 75))
        self.button_minus.setObjectName("button_minus")
        self.buttonLayout.addWidget(self.button_minus, 3, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.buttons)
        self.horizontalGroupBox = QtWidgets.QGroupBox(parent=self.whole_calculator)
        self.horizontalGroupBox.setObjectName("horizontalGroupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalGroupBox)
        self.horizontalLayout_2.setContentsMargins(11, 0, 5, 0)
        self.horizontalLayout_2.setSpacing(1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.numberF = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberF.sizePolicy().hasHeightForWidth())
        self.numberF.setSizePolicy(sizePolicy)
        self.numberF.setMinimumSize(QtCore.QSize(0, 50))
        self.numberF.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberF.setObjectName("numberF")
        self.horizontalLayout_2.addWidget(self.numberF)
        self.numberE = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberE.sizePolicy().hasHeightForWidth())
        self.numberE.setSizePolicy(sizePolicy)
        self.numberE.setMinimumSize(QtCore.QSize(0, 50))
        self.numberE.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberE.setObjectName("numberE")
        self.horizontalLayout_2.addWidget(self.numberE)
        self.numberD = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberD.sizePolicy().hasHeightForWidth())
        self.numberD.setSizePolicy(sizePolicy)
        self.numberD.setMinimumSize(QtCore.QSize(0, 50))
        self.numberD.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberD.setObjectName("numberD")
        self.horizontalLayout_2.addWidget(self.numberD)
        self.numberC = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberC.sizePolicy().hasHeightForWidth())
        self.numberC.setSizePolicy(sizePolicy)
        self.numberC.setMinimumSize(QtCore.QSize(0, 50))
        self.numberC.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberC.setObjectName("numberC")
        self.horizontalLayout_2.addWidget(self.numberC)
        self.numberB = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberB.sizePolicy().hasHeightForWidth())
        self.numberB.setSizePolicy(sizePolicy)
        self.numberB.setMinimumSize(QtCore.QSize(0, 50))
        self.numberB.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberB.setObjectName("numberB")
        self.horizontalLayout_2.addWidget(self.numberB)
        self.numberA = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberA.sizePolicy().hasHeightForWidth())
        self.numberA.setSizePolicy(sizePolicy)
        self.numberA.setMinimumSize(QtCore.QSize(0, 50))
        self.numberA.setMaximumSize(QtCore.QSize(16777215, 50))
        self.numberA.setObjectName("numberA")
        self.horizontalLayout_2.addWidget(self.numberA)
        self.verticalLayout_2.addWidget(self.horizontalGroupBox)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 434, 26))
        self.menubar.setObjectName("menubar")
        self.menuCalculator = QtWidgets.QMenu(parent=self.menubar)
        self.menuCalculator.setObjectName("menuCalculator")
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.menuCalculator.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.previous_input.setText(_translate("MainWindow", "0"))
        self.result.setText(_translate("MainWindow", "0"))
        self.number_system.setText(_translate("MainWindow", "Number System: 10"))
        self.number9.setText(_translate("MainWindow", "9"))
        self.number4.setText(_translate("MainWindow", "4"))
        self.number8.setText(_translate("MainWindow", "8"))
        self.button_mul.setText(_translate("MainWindow", "*"))
        self.number5.setText(_translate("MainWindow", "5"))
        self.number6.setText(_translate("MainWindow", "6"))
        self.number7.setText(_translate("MainWindow", "7"))
        self.button_plus.setText(_translate("MainWindow", "+"))
        self.button_div.setText(_translate("MainWindow", "/"))
        self.number3.setText(_translate("MainWindow", "3"))
        self.button_c.setText(_translate("MainWindow", "Clear"))
        self.button_equal.setText(_translate("MainWindow", "="))
        self.number0.setText(_translate("MainWindow", "0"))
        self.number1.setText(_translate("MainWindow", "1"))
        self.number2.setText(_translate("MainWindow", "2"))
        self.button_back.setText(_translate("MainWindow", "⌫"))
        self.button_sp.setText(_translate("MainWindow", "Time"))
        self.button_dot.setText(_translate("MainWindow", "."))
        self.button_ce.setText(_translate("MainWindow", "CE"))
        self.button_minus.setText(_translate("MainWindow", "-"))
        self.numberF.setText(_translate("MainWindow", "F"))
        self.numberE.setText(_translate("MainWindow", "E"))
        self.numberD.setText(_translate("MainWindow", "D"))
        self.numberC.setText(_translate("MainWindow", "C"))
        self.numberB.setText(_translate("MainWindow", "B"))
        self.numberA.setText(_translate("MainWindow", "A"))
        self.menuCalculator.setTitle(_translate("MainWindow", "Calculator"))



#БПМ-22-4:
#Макуров Михаил
#Воеводин Егор
#Нейман Алексей


from fractions import Fraction
import math

def digit_to_char(digit):
    if digit < 10:
        return str(digit)
    return chr(ord('A') + digit - 10)


def frac_to_str( fraction : Fraction, number_system : int, max_len : int)->str:
    (num,denom)=fraction.as_integer_ratio()
    res=str()
    is_negative=0

    if  num < 0 :
        is_negative=1
        num*=-1

    integer_part = num//denom
    cnt_dgt = 0
    if integer_part!=0:
        cnt_dgt=math.floor(math.log(integer_part,number_system))
        if (cnt_dgt>=9):
            denom*=number_system**cnt_dgt
            integer_part = num // denom
    num-=integer_part*denom

    while (len(res)<max_len and integer_part!=0):
        m=integer_part%number_system
        res+=digit_to_char(m)
        integer_part //= number_system
    if is_negative:
        res+='-'
    res=res[::-1]
    if (len(res)==0):
        res+='0'
    if (len(res)+1<max_len and num!=0):
        res+='.'
    while (len(res)<max_len and num!=0):
        num*=number_system
        d=num//denom
        num-=d*denom
        res+=digit_to_char(d)
    if cnt_dgt<9:
        return res
    else:
        return res + "e" + str(cnt_dgt)

def num_to_time(num : int)-> str:
    if (num==0):
        return "__:__:__"
    else:
        hours=str(num//3600)
        if len(hours)==1:
            hours="0"+hours
        minutes=str(num//60%60)
        if len(minutes)==1:
            minutes="0"+minutes
        seconds=str(num%60)
        if len(seconds)==1:
            seconds="0"+seconds
        return hours + ":" + minutes + ":" + seconds


class CalculatorLogic:
    def __init__(self):
        self.main_fraction = Fraction()
        self.secondary_fraction = Fraction()
        self.operator_symbol = 'c' # +,-,*,/,= - easy, c - clear all(except number system)
        self.input_fraction = "main"  # main - main_fraction, secondary - secondary_fraction
        self.number_system = 10
        self.max_number_len = 100
        self.is_time=0

    def input_number_system(self, number_system):
        self.number_system=int(number_system)

    def switch_time(self):
        if self.is_time==1:
            self.is_time=0
            return
        self.is_time=1
        num=0
        denom=1
        if self.input_fraction == "main":
            (num, denom) = self.main_fraction.as_integer_ratio()
        if self.input_fraction == "secondary":
            (num, denom) = self.secondary_fraction.as_integer_ratio()
        num//=denom
        denom=1
        if num >= 24 * 3600:
            num = 24 * 3600 - 1
        if self.input_fraction == "main":
            self.main_fraction = Fraction(num, denom)
        if self.input_fraction == "secondary":
            self.secondary_fraction = Fraction(num, denom)


    def input_number(self, number : str):
        dot_index=number.find('.')
        num=0
        denom=1
        self.is_time = 0
        if number=='':
            pass
        elif number.find(':')!=-1:
            self.is_time=1
            time=number.split(":")
            for i in range(0,3):
                time[i]=time[i].strip("_")
                if time[i]=="":
                    time[i]=0
                else:
                    time[i]=int(time[i])
            num=time[0]*3600+time[1]*60+time[2]
            if num>=24*3600:
                num=24*3600-1
        elif (dot_index==-1):
            num=int(number,self.number_system)
        elif number[-1]=='.':
            num = int(number[:-1], self.number_system)
        else:
            (integer_part,fractional_part)=number.split('.')
            denom = self.number_system**len(fractional_part)
            num = int(integer_part, self.number_system)*denom
            if number[0] != '-':
                num += int(fractional_part, self.number_system)
            else:
                num -= int(fractional_part, self.number_system)


        if self.input_fraction == "main":
            self.main_fraction = Fraction(num,denom)
        if self.input_fraction == "secondary":
            self.secondary_fraction = Fraction(num, denom)

    def input_operator(self, operator_symbol : str):

        if operator_symbol in ['+','-','*','/']:
            self.input_fraction="secondary"
        if operator_symbol in ['C','=']:
            self.input_fraction="main"

        if operator_symbol == 'C':
            self.main_fraction = Fraction()
            self.secondary_fraction = Fraction()
            return

        if self.operator_symbol=='+':
            self.main_fraction+=self.secondary_fraction
        if self.operator_symbol=='-':
            self.main_fraction=abs(self.main_fraction-self.secondary_fraction)
        if self.operator_symbol=='*':
            self.main_fraction*=self.secondary_fraction
        if self.operator_symbol=='/' and self.secondary_fraction!=0:
                self.main_fraction/=self.secondary_fraction
        if self.is_time==1:
            self.main_fraction=math.floor(self.main_fraction)
        if operator_symbol=="=" and self.is_time==1 and self.main_fraction>24*3600:
            self.main_fraction %=24 * 3600

        self.operator_symbol = operator_symbol


    def get_main_fraction(self) -> str :
        if self.is_time==1:
            return num_to_time(math.floor(self.main_fraction))
        return frac_to_str(self.main_fraction,self.number_system,self.max_number_len)
    def get_secondary_fraction(self) -> str :
        if self.is_time==1:
            return num_to_time(math.floor(self.secondary_fraction))
        return frac_to_str(self.secondary_fraction,self.number_system,self.max_number_len)
    def get_input_fraction(self) -> str :
        if self.input_fraction == "main":
            if self.is_time == 1:
                return num_to_time(math.floor(self.main_fraction))
            return frac_to_str(self.main_fraction,self.number_system,self.max_number_len)
        else:
            if self.is_time == 1:
                return num_to_time(math.floor(self.secondary_fraction))
            return frac_to_str(self.secondary_fraction, self.number_system, self.max_number_len)


class Command:
    @staticmethod
    def lStripZero(number: str) -> str:
        dot_index = number.find(".")
        if dot_index == -1:
            return number.lstrip('0')
        return number[:dot_index - 1].lstrip('0') + number[dot_index - 1:]

    @staticmethod
    # Repair after
    def separateNumber(number: str) -> str:
        return number

    def changeTo(self, other: str) -> None:
        commandHistory.push(self)

    def get(self):
        pass


class CommandHistory:
    def push(self, command: Command):
        self.__commands.append(command)

    def top(self) -> Command | None:
        if len(self.__commands) > 0:
            return self.__commands[-1]
        return None

    def getCurrentCommand(self) -> Command:
        return self.top()

    # Returns the last command used
    def pop(self) -> Command:
        last_command_used: Command = self.top()
        self.__commands.pop()
        return last_command_used

    def debugGetCommands(self):
        return self.__commands

    __commands: list[Command] = []


class CommandLine:
    def __init__(self):
        pass

    def isEmpty(self) -> bool:
        return len(Command.lStripZero(self.getText())) == 0

    def setLabel(self, label: QLabel):
        self.__line = label

    def appendDigit(self, digit: int):
        self.setText(Command.separateNumber(Command.lStripZero(self.__line.text()) + str(digit)))

    def setText(self, text: str):
        self.__line.setText(text)

    def clear(self):
        if calculator_logic.is_time == 0:
            self.setText("0")
        else:
            self.setText("__:__:__")

    def changeBase(self, new_base: int):
        calculator_logic.input_number_system(new_base)
        self.base = new_base
        self.__line.setText(calculator_logic.get_main_fraction())

    def getText(self) -> str:
        return self.__line.text()

    __line: QLabel = None
    base: int = 10


class NumberSystemLine(CommandLine):
    def setText(self, text: str):
        self.current_number_system = int(text)
        return super().setText(self.template + text)

    template: str = "Number System: "
    current_number_system: int = 10


commandHistory: CommandHistory = CommandHistory()
mainCommandLine: CommandLine = CommandLine()
historyCommandLine: CommandLine = CommandLine()
numberSystemLine: NumberSystemLine = NumberSystemLine()


class DigitCommand(Command):
    digitsAfter9 = {"a", "b", "c", "d", "e", "f"}

    @staticmethod
    def checkIfAvailable(command: str) -> bool:
        if len(command) > 1:
            return False
        if not (command[0].isdigit() or command[0] in DigitCommand.digitsAfter9):
            return False
        return True

    def __init__(self):
        pass

    def __init__(self, default):
        self.changeTo(default)

    def changeTo(self, other: str):
        if (calculator_logic.is_time == 1):
            if mainCommandLine.getText().find("_") == -1:
                return
            mainCommandLine.setText(mainCommandLine.getText().replace("_", other, 1))
        else:
            self.number = int(other, numberSystemLine.current_number_system)
            mainCommandLine.appendDigit(other)
        calculator_logic.input_number(mainCommandLine.getText())
        super().changeTo(other)

    def get(self) -> int:
        return self.number

    number: int = 0


class OperationQueue:
    @staticmethod
    def appendToQueue(text: str):
        OperationQueue.queue += text

    @staticmethod
    def isEmpty() -> bool:
        return len(Command.lStripZero(OperationQueue.queue)) == 0

    @staticmethod
    def clearQueue():
        OperationQueue.queue = ""

    queue: str = ""


class OperationCommand(Command):

    def __init__(self):
        pass

    def __init__(self, operation):
        self.changeTo(operation)

    @staticmethod
    def checkIfPossible(operation: str) -> bool:
        operations = {"+", "-", "/", "*"}
        return operation in operations

    class PossibleOperation(Enum):
        NONE = "0"
        ADDITION = "+"
        SUBTRACTION = "-"
        DIVISION = "/"
        MULTIPLICATION = "*"

    def changeTo(self, other: str) -> None:
        match other:
            case "+":
                self.__currentOperation = self.PossibleOperation.ADDITION
            case "-":
                self.__currentOperation = self.PossibleOperation.SUBTRACTION
            case "/":
                self.__currentOperation = self.PossibleOperation.DIVISION
            case "*":
                self.__currentOperation = self.PossibleOperation.MULTIPLICATION
            case _:
                raise ValueError(other + " was not one of Possible Operations")
        super().changeTo(other)

        OperationQueue.appendToQueue(calculator_logic.get_input_fraction().replace("_", "0") + self.get())
        calculator_logic.input_operator(other)
        historyCommandLine.setText(OperationQueue.queue)
        mainCommandLine.clear()

    def get(self):
        return self.__currentOperation.value

    __currentOperation: PossibleOperation = None


# Placeholder
def calculate(something: str) -> str:
    return calculator_logic.get_main_fraction()


class BackspaceCommand(Command):
    def __init__(self, something):
        self.changeTo(something)

    def changeTo(self, other: str) -> None:
        if calculator_logic.is_time == 1:
            arr = list(mainCommandLine.getText())
            for i in range(7, -1, -1):
                if arr[i].isdigit():
                    arr[i] = "_"
                    break
            mainCommandLine.setText("".join(arr))

        elif not mainCommandLine.isEmpty():
            mainCommandLine.setText(mainCommandLine.getText()[0:-1])
            if mainCommandLine.isEmpty():
                mainCommandLine.setText("0")
            calculator_logic.input_number(mainCommandLine.getText())
        super().changeTo(other)

    def get(self):
        return


class EqualCommand(Command):
    def __init__(self, operation):
        self.changeTo(operation)

    def changeTo(self, other: str) -> None:
        if isinstance(commandHistory.top(), EqualCommand):
            return
        if not mainCommandLine.isEmpty():
            OperationQueue.appendToQueue(calculator_logic.get_input_fraction().replace("_", "0") + self.get())
        elif not OperationQueue.isEmpty():
            OperationQueue.appendToQueue(self.get())

        calculator_logic.input_operator('=')
        # Here we delete a sign if the last command was something of a "+, -, /, *", since we do not
        # want to find something like: "65-=65"
        if isinstance(commandHistory.top(), OperationCommand):
            temp_str = OperationQueue.queue
            OperationQueue.clearQueue()
            OperationQueue.appendToQueue(temp_str[0:-2] + self.get())

        historyCommandLine.setText(OperationQueue.queue)
        result = calculate(OperationQueue.queue)
        mainCommandLine.setText(result)
        OperationQueue.clearQueue()
        # OperationQueue.appendToQueue(result)
        super().changeTo(other)

    def get(self):
        return "="


class ClearCommand(Command):
    def __init__(self):
        return self.changeTo(None)

    def changeTo(self, other) -> None:
        mainCommandLine.clear()
        historyCommandLine.clear()
        OperationQueue.clearQueue()
        calculator_logic.input_operator("C")

    def get(self):
        return "C"


class CommandFactory:

    @staticmethod
    def constructFromString(command: str) -> Command:

        if DigitCommand.checkIfAvailable(command.lower()):
            return DigitCommand(command)
        elif OperationCommand.checkIfPossible(command):
            return OperationCommand(command)
        elif command == "Clear":
            calculator_logic.input_number("")
            return ClearCommand()
        elif command == "=":
            return EqualCommand(command)
        elif command == "⌫":
            return BackspaceCommand(command)
        elif command == "CE":
            mainCommandLine.setText("0")
            calculator_logic.input_number("0")
        elif command == "." and mainCommandLine.getText().find(".") == -1:
            mainCommandLine.setText(mainCommandLine.getText() + ".")
        elif command == "Time":
            calculator_logic.switch_time()
            onSliderValueChange(str(slider.value()))
            mainCommandLine.setText(calculator_logic.get_input_fraction())


def findChildOfAName(parent, type, name: str):
    children = parent.findChildren(type)
    for i in range(len(children)):
        if children[i].objectName() == name:
            return children[i]
    return None


# Setup
app = QApplication([])


window = QMainWindow()
form = Ui_MainWindow()
form.setupUi(window)

mainCommandLine.setLabel(findChildOfAName(form.whole_calculator, QLabel, "result"))
historyCommandLine.setLabel(findChildOfAName(form.whole_calculator, QLabel, "previous_input"))
numberSystemLine.setLabel(findChildOfAName(form.whole_calculator, QLabel, "number_system"))

calculator_logic = CalculatorLogic()

buttonLayout: QGridLayout = findChildOfAName(form.whole_calculator, QWidget, "buttons").layout()
chars: QHBoxLayout = findChildOfAName(form.whole_calculator, QGroupBox, "horizontalGroupBox").layout()


def onSliderValueChange(new_value: str):
    numberSystemLine.setText(new_value)
    mainCommandLine.changeBase(int(new_value))
    if buttonLayout is None:
        return
    for row_index in range(buttonLayout.rowCount()):
        for column_index in range(buttonLayout.columnCount() + 2):
            if buttonLayout.itemAtPosition(column_index, row_index) is not None:
                button = buttonLayout.itemAtPosition(column_index, row_index).widget()
                if isinstance(button, QPushButton) and button.text()==".":
                    if calculator_logic.is_time==1:
                        button.setDisabled(True)
                    else:
                        button.setEnabled(True)

                if isinstance(button, QPushButton) and not button.text().isdigit():
                    continue
                if (isinstance(button, QPushButton) and int(button.text()) < int(
                        new_value)) or calculator_logic.is_time == 1:
                    button.setEnabled(True)
                    # button.setStyleSheet("background-color: gray")
                elif int(button.text()) >= int(new_value):
                    button.setDisabled(True)
    for i in range(chars.count()):
        button = chars.itemAt(i).widget()
        result = list(DigitCommand.digitsAfter9).index(button.text().lower())
        if (result + 10 < int(new_value) and calculator_logic.is_time == 0):
            chars.itemAt(5 - result).widget().setEnabled(True)
        else:
            chars.itemAt(5 - result).widget().setEnabled(False)


slider: QSlider = findChildOfAName(form.whole_calculator, QSlider, "horizontalSlider")
slider.valueChanged.connect(lambda: onSliderValueChange(str(slider.value())))

for row_index in range(buttonLayout.rowCount()):
    for column_index in range(buttonLayout.columnCount() + 2):
        if buttonLayout.itemAtPosition(column_index, row_index) is not None:
            button = buttonLayout.itemAtPosition(column_index, row_index).widget()
            if isinstance(button, QPushButton):

                if (button.text() == "⌫"):
                    # Does not work forsome reason
                    button.shortcut = QShortcut(QtCore.Qt.Key.Key_Backspace, button)
                else:
                    button.shortcut = QShortcut(QKeySequence(button.text()), button)
                button.shortcut.activated.connect(lambda text=button.text(): CommandFactory.constructFromString(text))
                button.clicked.connect(lambda checked, text=button.text(): CommandFactory.constructFromString(text))

for i in range(chars.count()):
    button = chars.itemAt(i).widget()
    button.shortcut = QShortcut(QKeySequence(button.text().lower()), button)
    button.shortcut.activated.connect(lambda text=button.text(): CommandFactory.constructFromString(text))
    button.clicked.connect(lambda checked, text=button.text(): CommandFactory.constructFromString(text))
    button.setDisabled(True)

window.show()
app.exec()
